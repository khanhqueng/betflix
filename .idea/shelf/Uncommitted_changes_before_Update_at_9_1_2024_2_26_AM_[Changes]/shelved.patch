Index: user-service/user-service/src/main/java/com/khanhisdev/userservice/config/AuthorizationServerConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.khanhisdev.userservice.config;\r\n\r\nimport com.khanhisdev.userservice.security.CustomUserDetails;\r\nimport com.nimbusds.jose.jwk.JWKSet;\r\nimport com.nimbusds.jose.jwk.RSAKey;\r\nimport com.nimbusds.jose.jwk.source.ImmutableJWKSet;\r\nimport com.nimbusds.jose.jwk.source.JWKSource;\r\nimport com.nimbusds.jose.proc.SecurityContext;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.Ordered;\r\nimport org.springframework.core.annotation.Order;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.authentication.AuthenticationProvider;\r\nimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;\r\nimport org.springframework.security.config.Customizer;\r\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.core.GrantedAuthority;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.oauth2.core.AuthorizationGrantType;\r\nimport org.springframework.security.oauth2.core.ClientAuthenticationMethod;\r\nimport org.springframework.security.oauth2.core.OAuth2Token;\r\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\r\nimport org.springframework.security.oauth2.jwt.NimbusJwtEncoder;\r\nimport org.springframework.security.oauth2.server.authorization.InMemoryOAuth2AuthorizationService;\r\nimport org.springframework.security.oauth2.server.authorization.OAuth2AuthorizationService;\r\nimport org.springframework.security.oauth2.server.authorization.client.InMemoryRegisteredClientRepository;\r\nimport org.springframework.security.oauth2.server.authorization.client.RegisteredClient;\r\nimport org.springframework.security.oauth2.server.authorization.client.RegisteredClientRepository;\r\nimport org.springframework.security.oauth2.server.authorization.config.annotation.web.configuration.OAuth2AuthorizationServerConfiguration;\r\nimport org.springframework.security.oauth2.server.authorization.config.annotation.web.configurers.OAuth2AuthorizationServerConfigurer;\r\nimport org.springframework.security.oauth2.server.authorization.settings.AuthorizationServerSettings;\r\nimport org.springframework.security.oauth2.server.authorization.settings.TokenSettings;\r\nimport org.springframework.security.oauth2.server.authorization.token.*;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;\r\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\r\n\r\nimport java.security.KeyPair;\r\nimport java.security.KeyPairGenerator;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.interfaces.RSAPrivateKey;\r\nimport java.security.interfaces.RSAPublicKey;\r\nimport java.time.Duration;\r\nimport java.util.Set;\r\nimport java.util.UUID;\r\nimport java.util.stream.Collectors;\r\n@RequiredArgsConstructor\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class AuthorizationServerConfig {\r\n    @Value(\"${issuerURI}\")\r\n    private String issuerUri;\r\n    private final UserDetailsService userDetailsService;\r\n    private final AuthenticationConfiguration authenticationConfiguration;\r\n    @Bean\r\n    public static PasswordEncoder passwordEncoder(){\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {\r\n        return authenticationConfiguration.getAuthenticationManager();\r\n    }\r\n    @Bean\r\n    public AuthenticationProvider authenticationProvider() {\r\n        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();\r\n        authenticationProvider.setUserDetailsService(userDetailsService);\r\n        authenticationProvider.setPasswordEncoder(passwordEncoder());\r\n        return authenticationProvider;\r\n    }\r\n    @Bean\r\n    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n                .csrf(AbstractHttpConfigurer::disable)\r\n                .authorizeHttpRequests((authorize)->\r\n                        authorize\r\n                                .requestMatchers(\"/actuator/**\").permitAll()\r\n                                .requestMatchers(HttpMethod.GET, \"/user/**\").permitAll()\r\n                                .requestMatchers(HttpMethod.POST,\"/user/**\").permitAll()\r\n                                .requestMatchers(HttpMethod.PUT,\"/user/**\").permitAll()\r\n                                .requestMatchers(\"/comment/**\").permitAll()\r\n                                .anyRequest().authenticated()\r\n\r\n                )\r\n                .formLogin(Customizer.withDefaults());\r\n\r\n        return http.build();\r\n    }\r\n    @Bean\r\n    public AuthorizationServerSettings authorizationServerSettings() {\r\n        return AuthorizationServerSettings.builder()\r\n                .issuer(issuerUri)\r\n                .authorizationEndpoint(\"/oauth2/v1/authorize\")\r\n                .deviceAuthorizationEndpoint(\"/oauth2/v1/device_authorization\")\r\n                .deviceVerificationEndpoint(\"/oauth2/v1/device_verification\")\r\n                .tokenEndpoint(\"/oauth2/v1/token\")\r\n                .tokenIntrospectionEndpoint(\"/oauth2/v1/introspect\")\r\n                .tokenRevocationEndpoint(\"/oauth2/v1/revoke\")\r\n                .jwkSetEndpoint(\"/oauth2/v1/jwks\")\r\n                .oidcLogoutEndpoint(\"/connect/v1/logout\")\r\n                .oidcUserInfoEndpoint(\"/connect/v1/userinfo\")\r\n                .oidcClientRegistrationEndpoint(\"/connect/v1/register\")\r\n                .build();\r\n    }\r\n    @Bean\r\n    public OAuth2TokenCustomizer<JwtEncodingContext> tokenCustomizer() {\r\n        return context -> {\r\n            CustomUserDetails user;\r\n            if (context.getPrincipal().getPrincipal() instanceof CustomUserDetails)\r\n                user = (CustomUserDetails) context.getPrincipal().getPrincipal();\r\n            else\r\n                user = (CustomUserDetails) context.getPrincipal().getDetails();\r\n            Set<String> authorities = user.getAuthorities().stream()\r\n                    .map(GrantedAuthority::getAuthority)\r\n                    .collect(Collectors.toSet());\r\n            // custom scope\r\n            if(context.getAuthorizationGrantType().equals(OAuth2PasswordGrantAuthenticationConverter.PASSWORD))\r\n                authorities.forEach(context.getAuthorizedScopes()::add);\r\n            context.getClaims()\r\n                    .claim(\"id\", user.getId())\r\n                    .claim(\"authorities\", authorities);\r\n        };\r\n    }\r\n\r\n    @Bean\r\n    public OAuth2TokenGenerator<? extends OAuth2Token> tokenGenerator() {\r\n        NimbusJwtEncoder jwtEncoder;\r\n        try {\r\n            jwtEncoder = new NimbusJwtEncoder(jwkSource());\r\n        } catch (NoSuchAlgorithmException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        JwtGenerator jwtGenerator = new JwtGenerator(jwtEncoder);\r\n        jwtGenerator.setJwtCustomizer(tokenCustomizer());\r\n        OAuth2AccessTokenGenerator accessTokenGenerator = new OAuth2AccessTokenGenerator();\r\n        OAuth2RefreshTokenGenerator refreshTokenGenerator = new OAuth2RefreshTokenGenerator();\r\n        return new DelegatingOAuth2TokenGenerator(\r\n                jwtGenerator, accessTokenGenerator, refreshTokenGenerator);\r\n    }\r\n\r\n    @Bean\r\n    public OAuth2AuthorizationService authorizationService() {\r\n        return new InMemoryOAuth2AuthorizationService();\r\n    }\r\n    @Bean\r\n    public RegisteredClientRepository registeredClientRepository() {\r\n        RegisteredClient oidcClient = RegisteredClient.withId(UUID.randomUUID().toString())\r\n                .clientId(\"client\")\r\n                .clientSecret(passwordEncoder().encode(\"secret\"))\r\n                .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)\r\n                .authorizationGrantType(OAuth2PasswordGrantAuthenticationConverter.PASSWORD)\r\n                .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_POST)\r\n                .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\r\n                .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)\r\n                .redirectUri(\"https://oidcdebugger.com/debug\")\r\n                .tokenSettings(tokenSettings())\r\n                .scope(\"client-internal\")\r\n                .build();\r\n\r\n        return new InMemoryRegisteredClientRepository(oidcClient);\r\n    }\r\n    @Bean\r\n    public TokenSettings tokenSettings() {\r\n        return TokenSettings.builder()\r\n                .accessTokenTimeToLive(Duration.ofMinutes(10))\r\n                .refreshTokenTimeToLive(Duration.ofHours(1))\r\n                .build();\r\n    }\r\n\r\n    @Bean\r\n    public OAuth2PasswordGrantAuthenticationProvider oAuth2PasswordGrantAuthenticationProvider(\r\n            OAuth2AuthorizationService oAuth2AuthorizationService,\r\n            OAuth2TokenGenerator<? extends OAuth2Token> oAuth2TokenGenerator,\r\n            AuthenticationManager authenticationManager\r\n\r\n    ) {\r\n        return new OAuth2PasswordGrantAuthenticationProvider(\r\n                oAuth2AuthorizationService,\r\n                oAuth2TokenGenerator,\r\n                authenticationManager\r\n        );\r\n    }\r\n    // config authentication request\r\n    @Bean\r\n    @Order(Ordered.HIGHEST_PRECEDENCE)\r\n    public SecurityFilterChain authorizationSecurityFilterChain(HttpSecurity http) throws Exception {\r\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\n\r\n        OAuth2AuthorizationServerConfigurer authorizationServerConfigure =\r\n                http.getConfigurer(OAuth2AuthorizationServerConfigurer.class);\r\n\r\n        authorizationServerConfigure.tokenEndpoint(tokenEndpoint ->\r\n                        {\r\n                            try {\r\n                                tokenEndpoint\r\n                                        .accessTokenRequestConverter(new OAuth2PasswordGrantAuthenticationConverter())\r\n                                        .authenticationProvider(oAuth2PasswordGrantAuthenticationProvider(\r\n                                                authorizationService(),\r\n                                                tokenGenerator(),\r\n                                                authenticationManager(authenticationConfiguration)\r\n                                        ));\r\n                            } catch (Exception e) {\r\n                                throw new RuntimeException(e);\r\n                            }\r\n                        }\r\n                )\r\n                .oidc(Customizer.withDefaults());\r\n\r\n        return http\r\n                .exceptionHandling(e -> e.authenticationEntryPoint(\r\n                        new LoginUrlAuthenticationEntryPoint(\"/login\")))\r\n                .build();\r\n    }\r\n    @Bean\r\n    public JWKSource<SecurityContext> jwkSource() throws NoSuchAlgorithmException{\r\n        KeyPair keyPair = generateRsaKey();\r\n        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();\r\n        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();\r\n        RSAKey rsaKey = new RSAKey.Builder(publicKey)\r\n                .privateKey(privateKey)\r\n                .keyID(UUID.randomUUID().toString())\r\n                .build();\r\n        JWKSet jwkSet = new JWKSet(rsaKey);\r\n        return new ImmutableJWKSet<>(jwkSet);\r\n    }\r\n\r\n    private static KeyPair generateRsaKey() throws NoSuchAlgorithmException {\r\n        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\r\n        keyPairGenerator.initialize(2048);\r\n        return keyPairGenerator.generateKeyPair();\r\n    }\r\n    @Bean\r\n    public JwtDecoder jwtDecoder(JWKSource<SecurityContext> jwkSource) {\r\n        return OAuth2AuthorizationServerConfiguration.jwtDecoder(jwkSource);\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user-service/user-service/src/main/java/com/khanhisdev/userservice/config/AuthorizationServerConfig.java b/user-service/user-service/src/main/java/com/khanhisdev/userservice/config/AuthorizationServerConfig.java
--- a/user-service/user-service/src/main/java/com/khanhisdev/userservice/config/AuthorizationServerConfig.java	(revision 5c2d9b7162e754788cb96f7051f2872931f3821b)
+++ b/user-service/user-service/src/main/java/com/khanhisdev/userservice/config/AuthorizationServerConfig.java	(date 1723494422207)
@@ -84,13 +84,13 @@
                 .authorizeHttpRequests((authorize)->
                         authorize
                                 .requestMatchers("/actuator/**").permitAll()
-                                .requestMatchers(HttpMethod.GET, "/user/**").permitAll()
                                 .requestMatchers(HttpMethod.POST,"/user/**").permitAll()
                                 .requestMatchers(HttpMethod.PUT,"/user/**").permitAll()
                                 .requestMatchers("/comment/**").permitAll()
                                 .anyRequest().authenticated()
 
                 )
+                .oauth2ResourceServer((resourceServer)->resourceServer.jwt(Customizer.withDefaults()))
                 .formLogin(Customizer.withDefaults());
 
         return http.build();
Index: order-service/order-service/src/main/java/com/khanhisdev/orderservice/service/impl/OrderServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.khanhisdev.orderservice.service.impl;\r\n\r\nimport com.khanhisdev.orderservice.dto.Message.EmailContent;\r\nimport com.khanhisdev.orderservice.dto.Message.OrderEvent;\r\nimport com.khanhisdev.orderservice.dto.Request.AddTicketRequest;\r\nimport com.khanhisdev.orderservice.dto.Request.DeleteTicketRequest;\r\nimport com.khanhisdev.orderservice.dto.Request.GetTicketRequest;\r\nimport com.khanhisdev.orderservice.dto.Response.ShowtimeForOrderDto;\r\nimport com.khanhisdev.orderservice.exception.ResourceNotFoundException;\r\nimport com.khanhisdev.orderservice.publisher.OrderProducer;\r\nimport com.khanhisdev.orderservice.service.OrderService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.data.redis.core.HashOperations;\r\nimport org.springframework.data.redis.core.RedisTemplate;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.reactive.function.client.WebClient;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n@Service\r\npublic class OrderServiceImpl extends BaseRedisServiceImpl<String,String,Object> implements OrderService {\r\n    @Value(\"${movie.host}\")\r\n    private String movie_hostname;\r\n    @Value(\"${user.host}\")\r\n    private String user_hostname;\r\n    @Autowired\r\n    private WebClient webClient;\r\n    @Autowired\r\n    private OrderProducer producer;\r\n\r\n    public OrderServiceImpl(RedisTemplate<String, Object> redisTemplate, HashOperations<String, String, Object> hashOperations) {\r\n        super(redisTemplate, hashOperations);\r\n    }\r\n\r\n    @Override\r\n    public void addTicketToCart(String userId, AddTicketRequest addTicketRequest) {\r\n        String key= \"order:user-\"+ userId;\r\n        String fieldKey;\r\n        List<String> seatsNeedOrder= addTicketRequest.getSeats();\r\n        fieldKey= \"TicketInfo_\"+ \"MovieId:\"+ addTicketRequest.getMovieId()+\",\"\r\n                +\"TheaterId:\" + addTicketRequest.getTheaterId()+\",\"\r\n                +\"RoomId:\"+ addTicketRequest.getProjectionRoomId()+\",\"\r\n                +\"StartTime:\"+ addTicketRequest.getShowtime();\r\n        if(this.hashExists(key,fieldKey)){\r\n            List<String>  seatsOrdered = (List<String>) this.hashGet(key,fieldKey);\r\n            seatsNeedOrder.addAll(seatsOrdered);\r\n\r\n        }\r\n        this.hashSet(key,fieldKey,seatsNeedOrder);\r\n        this.setTimeToLive(key, 30);\r\n        //Get Email of User from User Id\r\n        String email= webClient.get()\r\n                .uri(\"http://\"+user_hostname+ \":8092/user/\"+ userId)\r\n                .retrieve()\r\n                .bodyToMono(String.class)\r\n                .block();\r\n\r\n        // Set content Email and send to message queue\r\n        OrderEvent orderEvent= new OrderEvent();\r\n        orderEvent.setStatus(\"PENDING\");\r\n        orderEvent.setMessage(\"Email is in pending status\");\r\n        EmailContent emailContent= new EmailContent();\r\n        emailContent.setDesEmail(email);\r\n        emailContent.setNameMovie(addTicketRequest.getMovieName());\r\n        emailContent.setNameRoom(addTicketRequest.getRoomName());\r\n        emailContent.setShowtime(addTicketRequest.getShowtime());\r\n        emailContent.setNameTheater(addTicketRequest.getTheaterName());\r\n        emailContent.setSeats(addTicketRequest.getSeats());\r\n        orderEvent.setContent(emailContent);\r\n        producer.sendMessage(orderEvent);\r\n    }\r\n\r\n    @Override\r\n    public void deleteTicketInCart(String userId, DeleteTicketRequest deleteTicketRequest) {\r\n        String key= \"order:user-\"+ userId;\r\n        String fieldKey;\r\n        fieldKey= \"TicketInfo_\"+ \"MovieId:\"+ deleteTicketRequest.getMovieId()+\",\"\r\n                +\"TheaterId:\" + deleteTicketRequest.getTheaterId()+\",\"\r\n                +\"RoomId:\"+ deleteTicketRequest.getProjectionRoomId()+\",\"\r\n                +\"StartTime:\"+ deleteTicketRequest.getShowtime();\r\n        if(!this.hashExists(key,fieldKey)){\r\n            throw new ResourceNotFoundException(\"Order\",\"id\",deleteTicketRequest.getProjectionRoomId());\r\n        }\r\n        this.delete(key,fieldKey);\r\n    }\r\n\r\n    @Override\r\n    public List<ShowtimeForOrderDto> getShowtimeFromCart(String userId) {\r\n        String key= \"order:user-\"+ userId;\r\n        Map<String, Object> showtime= this.getField(key);\r\n        List<GetTicketRequest> getTicketRequests= new ArrayList<>();\r\n        for (Map.Entry<String, Object> entry : showtime.entrySet()) {\r\n            String info= entry.getKey().split(\"_\")[1];\r\n            String startTime= (info.split(\",\")[3]).split(\":\")[1]+\":\"+(info.split(\",\")[3]).split(\":\")[2];\r\n            Long roomId= Long.valueOf((info.split(\",\")[2]).split(\":\")[1]);\r\n            List<String>  seatsOrdered = (List<String>) entry.getValue();\r\n            getTicketRequests.add(new GetTicketRequest(startTime,roomId,seatsOrdered));\r\n        }\r\n\r\n        List<ShowtimeForOrderDto> response= webClient.post()\r\n                .uri(\"http://\"+movie_hostname+ \":8091/showtime/order\")\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .bodyValue(getTicketRequests)\r\n                .retrieve()\r\n                .bodyToFlux(ShowtimeForOrderDto.class)\r\n                .collectList()\r\n                .block();\r\n        return response;\r\n\r\n    }\r\n\r\n    @Override\r\n    public void deleteAllTicket(String userId) {\r\n        String key= \"order:user-\"+ userId;\r\n        this.delete(key);\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/order-service/src/main/java/com/khanhisdev/orderservice/service/impl/OrderServiceImpl.java b/order-service/order-service/src/main/java/com/khanhisdev/orderservice/service/impl/OrderServiceImpl.java
--- a/order-service/order-service/src/main/java/com/khanhisdev/orderservice/service/impl/OrderServiceImpl.java	(revision 5c2d9b7162e754788cb96f7051f2872931f3821b)
+++ b/order-service/order-service/src/main/java/com/khanhisdev/orderservice/service/impl/OrderServiceImpl.java	(date 1723897023979)
@@ -52,7 +52,7 @@
         }
         this.hashSet(key,fieldKey,seatsNeedOrder);
         this.setTimeToLive(key, 30);
-        //Get Email of User from User Id
+        //Get Email of User from User id
         String email= webClient.get()
                 .uri("http://"+user_hostname+ ":8092/user/"+ userId)
                 .retrieve()
