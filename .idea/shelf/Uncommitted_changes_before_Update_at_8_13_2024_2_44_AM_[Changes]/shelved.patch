Index: movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/dto/RequestDto/MovieUpdateRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/dto/RequestDto/MovieUpdateRequestDto.java b/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/dto/RequestDto/MovieUpdateRequestDto.java
new file mode 100644
--- /dev/null	(date 1723011735807)
+++ b/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/dto/RequestDto/MovieUpdateRequestDto.java	(date 1723011735807)
@@ -0,0 +1,19 @@
+package com.khanhisdev.movieservice.dto.RequestDto;
+
+import com.khanhisdev.movieservice.entity.Actor;
+import com.khanhisdev.movieservice.entity.Director;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.util.List;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+public class MovieUpdateRequestDto {
+    private List<Director> director;
+    private List<Actor> actors;
+}
Index: movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/repository/CategoryRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.khanhisdev.movieservice.repository;\r\n\r\nimport com.khanhisdev.movieservice.entity.Category;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\n@Repository\r\npublic interface CategoryRepository extends JpaRepository<Category,Long> {\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/repository/CategoryRepository.java b/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/repository/CategoryRepository.java
--- a/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/repository/CategoryRepository.java	(revision 5c2d9b7162e754788cb96f7051f2872931f3821b)
+++ b/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/repository/CategoryRepository.java	(date 1723003847048)
@@ -4,7 +4,9 @@
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
 
+import java.util.Optional;
+
 @Repository
 public interface CategoryRepository extends JpaRepository<Category,Long> {
-
+    Optional<Category> findByName(String name);
 }
Index: user-service/user-service/src/main/java/com/khanhisdev/userservice/utils/AppConstants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user-service/user-service/src/main/java/com/khanhisdev/userservice/utils/AppConstants.java b/user-service/user-service/src/main/java/com/khanhisdev/userservice/utils/AppConstants.java
new file mode 100644
--- /dev/null	(date 1722970181610)
+++ b/user-service/user-service/src/main/java/com/khanhisdev/userservice/utils/AppConstants.java	(date 1722970181610)
@@ -0,0 +1,8 @@
+package com.khanhisdev.userservice.utils;
+
+public class AppConstants {
+    public static final String DEFAULT_PAGE_NUMBER= "0";
+    public static final String DEFAULT_PAGE_SIZE="8";
+    public static final String DEFAULT_SORT_BY= "id";
+    public static final String DEFAULT_SORT_DIRECTION= "asc";
+}
Index: movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/service/impl/MovieServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.khanhisdev.movieservice.service.impl;\r\n\r\nimport com.khanhisdev.movieservice.dto.Mapper.CategoryMapper;\r\nimport com.khanhisdev.movieservice.dto.Mapper.MovieMapper;\r\nimport com.khanhisdev.movieservice.dto.Message.CategoryMessage;\r\nimport com.khanhisdev.movieservice.dto.RequestDto.MovieRequestDto;\r\nimport com.khanhisdev.movieservice.dto.ResponseDto.MovieResponseDto;\r\nimport com.khanhisdev.movieservice.dto.ResponseDto.ObjectResponse;\r\nimport com.khanhisdev.movieservice.entity.Actor;\r\nimport com.khanhisdev.movieservice.entity.Category;\r\nimport com.khanhisdev.movieservice.entity.Director;\r\nimport com.khanhisdev.movieservice.entity.Movie;\r\nimport com.khanhisdev.movieservice.exception.ResourceDuplicateException;\r\nimport com.khanhisdev.movieservice.exception.ResourceNotFoundException;\r\nimport com.khanhisdev.movieservice.repository.*;\r\nimport com.khanhisdev.movieservice.service.MovieService;\r\nimport com.netflix.discovery.converters.Auto;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.PageRequest;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.domain.Sort;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class MovieServiceImpl implements MovieService {\r\n    private final MovieRepository movieRepository;\r\n    private final MovieMapper movieMapper;\r\n    private final CategoryRepository categoryRepository;\r\n    private final CategoryMapper categoryMapper;\r\n    private final TheaterRepository theaterRepository;\r\n    private final ActorRepository actorRepository;\r\n    private final DirectorRepository directorRepository;\r\n    @Override\r\n    @Transactional\r\n    public MovieResponseDto saveMovie(MovieRequestDto movieDto) {\r\n        Movie movie = movieRepository.findByName(movieDto.getName());\r\n        if(movie != null){\r\n            throw new ResourceDuplicateException(\"Movie\", \"name\", movieDto.getName());\r\n\r\n        }else{\r\n            // handle Category check\r\n            List<Category> categoryList= categoryRepository.findAll();\r\n            List<CategoryMessage> categoryNeedCheck= movieDto.getCategories();\r\n            List<CategoryMessage> listWillBeUpdated= new ArrayList<>();\r\n            boolean flag=false;\r\n            for(int i =0;i<categoryNeedCheck.size();i++){\r\n                flag=false;\r\n                for(int j=0;j<categoryList.size();j++){\r\n                    if (categoryNeedCheck.get(i).equals(categoryList.get(j))) {\r\n                        listWillBeUpdated.add(categoryMapper.mapToDto(categoryList.get(j)));\r\n                        flag= true;\r\n                        break;\r\n                    };\r\n                }\r\n                if(!flag) {\r\n                    Category category = categoryRepository.save(categoryMapper.mapToEntity(categoryNeedCheck.get(i)));\r\n                    listWillBeUpdated.add(categoryMapper.mapToDto(category));\r\n                }\r\n            }\r\n            List<Director> directors= new ArrayList<>();\r\n            // handle Director check\r\n            for(Director director: movieDto.getDirector()){\r\n                if(directorRepository.findByName(director.getName()).isPresent()){\r\n                    directors.add(directorRepository.findByName(director.getName()).get());\r\n                }\r\n                else {\r\n                    directors.add(directorRepository.save(director));\r\n\r\n                }\r\n            }\r\n            List<Actor> actors= new ArrayList<>();\r\n            // handle Actor check\r\n            for(Actor actor: movieDto.getActors()){\r\n                if(actorRepository.findByName(actor.getName()).isPresent()){\r\n                    actors.add(actorRepository.findByName(actor.getName()).get());\r\n                }\r\n                else {\r\n                    actors.add(actorRepository.save(actor));\r\n\r\n                }\r\n            }\r\n            movieDto.setDirector(directors);\r\n            movieDto.setActors(actors);\r\n            movieDto.setCategories(listWillBeUpdated);\r\n            Movie newMovie= movieRepository.save(movieMapper.mapToEntity(movieDto));\r\n            return movieMapper.mapToResponseDto(newMovie);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    @Transactional(readOnly = true)\r\n    public MovieResponseDto getMovieById(Long id) {\r\n        Movie movie= movieRepository.findById(id).orElseThrow(()-> new ResourceNotFoundException(\"Movie\",\"name\",id));\r\n        return movieMapper.mapToResponseDto(movie);\r\n\r\n    }\r\n\r\n    @Override\r\n    @Transactional(readOnly = true)\r\n    public ObjectResponse<MovieResponseDto> getAllMovies(int pageNo, int pageSize, String sortBy, String sortDir) {\r\n        // create sort\r\n        Sort sort =sortDir.equalsIgnoreCase(Sort.Direction.ASC.name()) ? Sort.by(sortBy).ascending()\r\n                : Sort.by(sortBy).descending();\r\n        //create pageable instance\r\n        Pageable pageable= PageRequest.of(pageNo,pageSize,sort);\r\n\r\n        Page<Movie> movies= movieRepository.findAll(pageable);\r\n        List<Movie> movieList= movies.getContent();\r\n        List<MovieResponseDto> content= movieList.stream().map(movie -> movieMapper.mapToResponseDto(movie)).collect(Collectors.toList());\r\n        return new ObjectResponse<MovieResponseDto>(\r\n            content, movies.getNumber(),movies.getSize(),movies.getTotalElements(),movies.getTotalPages(),movies.isLast()\r\n        );\r\n\r\n    }\r\n\r\n    @Override\r\n    @Transactional(readOnly = true)\r\n    public List<MovieResponseDto> getAllMoviesFromTheater(Long theaterId) {\r\n        if( !theaterRepository.existsById(theaterId)) throw new ResourceNotFoundException(\"Theater\",\"id\",theaterId);\r\n        List<Movie> movies= movieRepository.findByShowtimeListTheaterId(theaterId);\r\n        return movies.stream().map(movie -> movieMapper.mapToResponseDto(movie)).collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    @Transactional(readOnly = true)\r\n    public List<MovieResponseDto> getMoviesByIds(List<Long> ids) {\r\n        return movieRepository.findAllByIdIn(ids).stream().map(movie -> movieMapper.mapToResponseDto(movie)).collect(Collectors.toList());\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/service/impl/MovieServiceImpl.java b/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/service/impl/MovieServiceImpl.java
--- a/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/service/impl/MovieServiceImpl.java	(revision 5c2d9b7162e754788cb96f7051f2872931f3821b)
+++ b/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/service/impl/MovieServiceImpl.java	(date 1723015811874)
@@ -4,6 +4,7 @@
 import com.khanhisdev.movieservice.dto.Mapper.MovieMapper;
 import com.khanhisdev.movieservice.dto.Message.CategoryMessage;
 import com.khanhisdev.movieservice.dto.RequestDto.MovieRequestDto;
+import com.khanhisdev.movieservice.dto.RequestDto.MovieUpdateRequestDto;
 import com.khanhisdev.movieservice.dto.ResponseDto.MovieResponseDto;
 import com.khanhisdev.movieservice.dto.ResponseDto.ObjectResponse;
 import com.khanhisdev.movieservice.entity.Actor;
@@ -48,22 +49,14 @@
 
         }else{
             // handle Category check
-            List<Category> categoryList= categoryRepository.findAll();
-            List<CategoryMessage> categoryNeedCheck= movieDto.getCategories();
-            List<CategoryMessage> listWillBeUpdated= new ArrayList<>();
-            boolean flag=false;
-            for(int i =0;i<categoryNeedCheck.size();i++){
-                flag=false;
-                for(int j=0;j<categoryList.size();j++){
-                    if (categoryNeedCheck.get(i).equals(categoryList.get(j))) {
-                        listWillBeUpdated.add(categoryMapper.mapToDto(categoryList.get(j)));
-                        flag= true;
-                        break;
-                    };
+            List<CategoryMessage> categories= new ArrayList<>();
+            for(CategoryMessage category: movieDto.getCategories()){
+                if(categoryRepository.findByName(category.getName()).isPresent()){
+                    categories.add(categoryMapper.mapToDto(categoryRepository.findByName(category.getName()).get()));
                 }
-                if(!flag) {
-                    Category category = categoryRepository.save(categoryMapper.mapToEntity(categoryNeedCheck.get(i)));
-                    listWillBeUpdated.add(categoryMapper.mapToDto(category));
+                else {
+                    categories.add(categoryMapper.mapToDto(categoryRepository.save(categoryMapper.mapToEntity(category))) );
+
                 }
             }
             List<Director> directors= new ArrayList<>();
@@ -84,15 +77,18 @@
                     actors.add(actorRepository.findByName(actor.getName()).get());
                 }
                 else {
-                    actors.add(actorRepository.save(actor));
+//                    Actor newActor= new Actor();
+//                    newActor.setName(actor.getName());
+                    actors.add(actor);
 
                 }
             }
             movieDto.setDirector(directors);
             movieDto.setActors(actors);
-            movieDto.setCategories(listWillBeUpdated);
-            Movie newMovie= movieRepository.save(movieMapper.mapToEntity(movieDto));
-            return movieMapper.mapToResponseDto(newMovie);
+            movieDto.setCategories(categories);
+            Movie updateMovie= movieMapper.mapToEntity(movieDto);
+            Movie updatedMovie= movieRepository.save(updateMovie);
+            return movieMapper.mapToResponseDto(updatedMovie);
         }
     }
 
@@ -130,6 +126,26 @@
         return movies.stream().map(movie -> movieMapper.mapToResponseDto(movie)).collect(Collectors.toList());
     }
 
+    @Override
+    public MovieResponseDto updateMovie(Long movieId, MovieUpdateRequestDto movieUpdateRequestDto) {
+        Movie movie = movieRepository.findById(movieId).orElseThrow(()-> new ResourceNotFoundException("movie", "id", movieId));
+        List<Actor> actors= new ArrayList<>();
+        for(Actor actor: movieUpdateRequestDto.getActors()){
+            if(actorRepository.findByName(actor.getName()).isPresent()){
+                actors.add(actorRepository.findByName(actor.getName()).get());
+            }
+            else {
+//                    Actor newActor= new Actor();
+//                    newActor.setName(actor.getName());
+                actors.add(actor);
+
+            }
+        }
+        movie.setActors(actors);
+        return movieMapper.mapToResponseDto(movieRepository.save(movie));
+        
+    }
+
     @Override
     @Transactional(readOnly = true)
     public List<MovieResponseDto> getMoviesByIds(List<Long> ids) {
Index: movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/service/MovieService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.khanhisdev.movieservice.service;\r\n\r\nimport com.khanhisdev.movieservice.dto.RequestDto.MovieRequestDto;\r\nimport com.khanhisdev.movieservice.dto.ResponseDto.MovieResponseDto;\r\nimport com.khanhisdev.movieservice.dto.ResponseDto.ObjectResponse;\r\n\r\nimport java.util.List;\r\n\r\npublic interface MovieService {\r\n    MovieResponseDto saveMovie(MovieRequestDto movieDto);\r\n    MovieResponseDto getMovieById(Long id);\r\n    ObjectResponse<MovieResponseDto> getAllMovies(int pageNo, int pageSize,String sortBy,String sortDir);\r\n    List<MovieResponseDto> getAllMoviesFromTheater(Long theaterId);\r\n    List<MovieResponseDto>  getMoviesByIds(List<Long > ids);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/service/MovieService.java b/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/service/MovieService.java
--- a/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/service/MovieService.java	(revision 5c2d9b7162e754788cb96f7051f2872931f3821b)
+++ b/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/service/MovieService.java	(date 1723011735792)
@@ -1,6 +1,7 @@
 package com.khanhisdev.movieservice.service;
 
 import com.khanhisdev.movieservice.dto.RequestDto.MovieRequestDto;
+import com.khanhisdev.movieservice.dto.RequestDto.MovieUpdateRequestDto;
 import com.khanhisdev.movieservice.dto.ResponseDto.MovieResponseDto;
 import com.khanhisdev.movieservice.dto.ResponseDto.ObjectResponse;
 
@@ -11,5 +12,6 @@
     MovieResponseDto getMovieById(Long id);
     ObjectResponse<MovieResponseDto> getAllMovies(int pageNo, int pageSize,String sortBy,String sortDir);
     List<MovieResponseDto> getAllMoviesFromTheater(Long theaterId);
+    MovieResponseDto updateMovie(Long movieId, MovieUpdateRequestDto movieUpdateRequestDto);
     List<MovieResponseDto>  getMoviesByIds(List<Long > ids);
 }
Index: movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/controller/MovieController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.khanhisdev.movieservice.controller;\r\n\r\nimport com.khanhisdev.movieservice.dto.RequestDto.MovieRequestDto;\r\nimport com.khanhisdev.movieservice.dto.ResponseDto.MovieResponseDto;\r\nimport com.khanhisdev.movieservice.dto.ResponseDto.ObjectResponse;\r\nimport com.khanhisdev.movieservice.entity.Movie;\r\nimport com.khanhisdev.movieservice.repository.MovieRepository;\r\nimport com.khanhisdev.movieservice.service.MovieService;\r\nimport com.khanhisdev.movieservice.utils.AppConstants;\r\nimport jakarta.validation.Valid;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/movie\")\r\npublic class MovieController {\r\n\r\n    @Autowired\r\n    private MovieService movieService;\r\n    @Autowired\r\n    private MovieRepository movieRepository;\r\n    @PostMapping\r\n    public ResponseEntity<MovieResponseDto> createMovie(@Valid @RequestBody MovieRequestDto movieDto){\r\n        return new ResponseEntity<>(movieService.saveMovie(movieDto), HttpStatus.CREATED);\r\n    }\r\n    @GetMapping(\"{id}\")\r\n    public ResponseEntity<MovieResponseDto> getMovieById(@PathVariable(\"id\") Long id){\r\n        return new ResponseEntity<>(movieService.getMovieById(id), HttpStatus.OK);\r\n    }\r\n    @GetMapping\r\n    public ObjectResponse<MovieResponseDto> getAllMovies(\r\n            @RequestParam(value = \"pageNo\", defaultValue = AppConstants.DEFAULT_PAGE_NUMBER,required = false) int pageNo,\r\n            @RequestParam(value = \"pageSize\", defaultValue = AppConstants.DEFAULT_PAGE_SIZE, required = false) int pageSize,\r\n            @RequestParam(value = \"sortBy\", defaultValue = AppConstants.DEFAULT_SORT_BY, required = false) String sortBy,\r\n            @RequestParam(value = \"sortDir\", defaultValue = AppConstants.DEFAULT_SORT_DIRECTION, required = false) String sortDir\r\n    ){\r\n        return movieService.getAllMovies(pageNo, pageSize, sortBy, sortDir);\r\n    }\r\n    @GetMapping(\"/ids\")\r\n    public ResponseEntity<List<MovieResponseDto>> getMoviesByIds(@RequestParam List<Long> ids){\r\n        return new ResponseEntity<>(movieService.getMoviesByIds(ids), HttpStatus.OK);\r\n    }\r\n    @GetMapping(\"/theater/{id}\")\r\n    public ResponseEntity<List<MovieResponseDto>> getMoviesByTheater(@PathVariable(name = \"id\") Long theaterId){\r\n        return new ResponseEntity<>(movieService.getAllMoviesFromTheater(theaterId), HttpStatus.OK);\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/controller/MovieController.java b/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/controller/MovieController.java
--- a/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/controller/MovieController.java	(revision 5c2d9b7162e754788cb96f7051f2872931f3821b)
+++ b/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/controller/MovieController.java	(date 1723020882244)
@@ -1,6 +1,7 @@
 package com.khanhisdev.movieservice.controller;
 
 import com.khanhisdev.movieservice.dto.RequestDto.MovieRequestDto;
+import com.khanhisdev.movieservice.dto.RequestDto.MovieUpdateRequestDto;
 import com.khanhisdev.movieservice.dto.ResponseDto.MovieResponseDto;
 import com.khanhisdev.movieservice.dto.ResponseDto.ObjectResponse;
 import com.khanhisdev.movieservice.entity.Movie;
@@ -17,6 +18,7 @@
 
 @RestController
 @RequestMapping("/movie")
+@CrossOrigin("http://localhost:5173")
 public class MovieController {
 
     @Autowired
@@ -48,6 +50,10 @@
     public ResponseEntity<List<MovieResponseDto>> getMoviesByTheater(@PathVariable(name = "id") Long theaterId){
         return new ResponseEntity<>(movieService.getAllMoviesFromTheater(theaterId), HttpStatus.OK);
     }
+    @PutMapping("/{id}")
+    public ResponseEntity<MovieResponseDto> updateMovie(@PathVariable(name = "id") Long movieId, @RequestBody MovieUpdateRequestDto requestDto){
+        return new ResponseEntity<>(movieService.updateMovie(movieId, requestDto), HttpStatus.OK);
+    }
 
 
 
Index: user-service/user-service/src/main/java/com/khanhisdev/userservice/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.khanhisdev.userservice.service;\r\n\r\nimport com.khanhisdev.userservice.dto.RequestDto.UserDto;\r\nimport com.khanhisdev.userservice.dto.ResponseDto.APIResponseDto;\r\nimport com.khanhisdev.userservice.dto.ResponseDto.UserResponseDto;\r\nimport com.khanhisdev.userservice.entity.LikedMovie;\r\n\r\npublic interface UserService {\r\n    UserDto createUser(UserDto userDto);\r\n    APIResponseDto getUserById(Long id);\r\n    UserDto getUserByUsername(String userName);\r\n    UserResponseDto userLikeMovie(Long userId, Long movieId);\r\n    String getEmailByUserId(Long id);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user-service/user-service/src/main/java/com/khanhisdev/userservice/service/UserService.java b/user-service/user-service/src/main/java/com/khanhisdev/userservice/service/UserService.java
--- a/user-service/user-service/src/main/java/com/khanhisdev/userservice/service/UserService.java	(revision 5c2d9b7162e754788cb96f7051f2872931f3821b)
+++ b/user-service/user-service/src/main/java/com/khanhisdev/userservice/service/UserService.java	(date 1722970181592)
@@ -2,10 +2,12 @@
 
 import com.khanhisdev.userservice.dto.RequestDto.UserDto;
 import com.khanhisdev.userservice.dto.ResponseDto.APIResponseDto;
+import com.khanhisdev.userservice.dto.ResponseDto.ObjectResponse;
 import com.khanhisdev.userservice.dto.ResponseDto.UserResponseDto;
 import com.khanhisdev.userservice.entity.LikedMovie;
 
 public interface UserService {
+    ObjectResponse<UserResponseDto> getAllUsers(int pageNo, int pageSize, String sortBy, String sortDirect);
     UserDto createUser(UserDto userDto);
     APIResponseDto getUserById(Long id);
     UserDto getUserByUsername(String userName);
Index: movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/entity/ProjectionRoom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.khanhisdev.movieservice.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.Setter;\r\n\r\nimport java.util.List;\r\n\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n\r\n@Entity\r\n@Table(name = \"projection_room\")\r\npublic class ProjectionRoom {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"projectionRoom_id\")\r\n    private Long id;\r\n    private int number;\r\n    private int seats;\r\n    @ManyToOne\r\n    @JoinColumn(name = \"theater_id\",referencedColumnName = \"theater_id\")\r\n    private Theater theater;\r\n    @OneToMany(mappedBy = \"projectionRoom\")\r\n    private List<Showtime> showtimeList;\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/entity/ProjectionRoom.java b/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/entity/ProjectionRoom.java
--- a/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/entity/ProjectionRoom.java	(revision 5c2d9b7162e754788cb96f7051f2872931f3821b)
+++ b/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/entity/ProjectionRoom.java	(date 1723012351895)
@@ -25,7 +25,7 @@
     @ManyToOne
     @JoinColumn(name = "theater_id",referencedColumnName = "theater_id")
     private Theater theater;
-    @OneToMany(mappedBy = "projectionRoom")
+    @OneToMany( mappedBy = "projectionRoom")
     private List<Showtime> showtimeList;
 
 }
Index: user-service/user-service/src/main/java/com/khanhisdev/userservice/service/impl/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.khanhisdev.userservice.service.impl;\r\n\r\nimport com.khanhisdev.userservice.dto.Mapper.UserMapper;\r\nimport com.khanhisdev.userservice.dto.RequestDto.MovieDto;\r\nimport com.khanhisdev.userservice.dto.RequestDto.UserDto;\r\nimport com.khanhisdev.userservice.dto.ResponseDto.APIResponseDto;\r\nimport com.khanhisdev.userservice.dto.ResponseDto.UserResponseDto;\r\nimport com.khanhisdev.userservice.entity.LikedMovie;\r\nimport com.khanhisdev.userservice.entity.Role;\r\nimport com.khanhisdev.userservice.entity.User;\r\nimport com.khanhisdev.userservice.exception.ResourceDuplicateException;\r\nimport com.khanhisdev.userservice.exception.ResourceNotFoundException;\r\nimport com.khanhisdev.userservice.repository.RoleRepository;\r\nimport com.khanhisdev.userservice.repository.UserRepository;\r\nimport com.khanhisdev.userservice.service.UserService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.springframework.web.reactive.function.client.WebClient;\r\n\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@Transactional\r\npublic class UserServiceImpl implements UserService {\r\n    @Value(\"${movie.host}\")\r\n    private String movie_hostname;\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n    @Autowired\r\n    private UserMapper mapper;\r\n    @Autowired\r\n    private PasswordEncoder passwordEncoder;\r\n    @Autowired\r\n    private WebClient webClient;\r\n    @Autowired\r\n    private RoleRepository roleRepository;\r\n    @Override\r\n    public UserDto createUser(UserDto userDto){\r\n\r\n        if(userRepository.existsByUsername(userDto.getUsername())){\r\n            throw new ResourceDuplicateException(\"user\",\"username\",userDto.getUsername());\r\n        }\r\n        User user= mapper.mapToEntity(userDto);\r\n        passwordEncoder= new BCryptPasswordEncoder();\r\n        user.setPassword(passwordEncoder.encode(userDto.getPassword()));\r\n        Set<Role> roles= new HashSet<>();\r\n        roles.add(roleRepository.findByName(\"USER\").get());\r\n        user.setRoles(roles);\r\n        return mapper.mapToDto(userRepository.save(user));\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public APIResponseDto getUserById(Long id) {\r\n        User user = this.userRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException(\"User\", \"id\", id));\r\n        List<Long> ids = user.getMovieId().stream().map(LikedMovie::getMovieId).toList();\r\n        String result = ids.stream()\r\n                .map(String::valueOf) // Convert Long to String\r\n                .collect(Collectors.joining(\",\"));\r\n        List<MovieDto> movieDtoList= webClient.get()\r\n                .uri(\"http://\"+movie_hostname+\":8091/movie/ids?ids=\"+ result)\r\n                .retrieve()\r\n                .bodyToFlux(MovieDto.class)\r\n                .collectList()\r\n                .block();\r\n        APIResponseDto apiResponseDto= new APIResponseDto(mapper.mapToDto(user),movieDtoList);\r\n        return apiResponseDto;\r\n    }\r\n\r\n    @Override\r\n    public UserDto getUserByUsername(String userName) {\r\n        User user = this.userRepository.findByUsername(userName).orElseThrow(()->new UsernameNotFoundException(\"User not found with username: \"+userName));\r\n        return this.mapper.mapToDto(user);\r\n    }\r\n\r\n    @Override\r\n    public UserResponseDto userLikeMovie(Long userId, Long movieId) {\r\n        User user= userRepository.findById(userId).orElseThrow(()->new ResourceNotFoundException(\"User\",\"id\",userId));\r\n        List<LikedMovie> likedMovies= new ArrayList<>();\r\n        LikedMovie likedMovie = new LikedMovie();\r\n        likedMovie.setMovieId(movieId);\r\n        likedMovie.setUserId(user);\r\n        likedMovies.add(likedMovie);\r\n        user.setMovieId(likedMovies);\r\n        UserResponseDto response=  mapper.mapToResponseDto(userRepository.save(user));\r\n        List<Long> movies= new ArrayList<>();\r\n        movies.add(movieId);\r\n        response.setMovie_ids(movies);\r\n        return response;\r\n    }\r\n\r\n    @Override\r\n    public String getEmailByUserId(Long id) {\r\n       User user= userRepository.findById(id).orElseThrow(()-> new ResourceNotFoundException(\"User\", \"id\", id));\r\n       return user.getEmail();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user-service/user-service/src/main/java/com/khanhisdev/userservice/service/impl/UserServiceImpl.java b/user-service/user-service/src/main/java/com/khanhisdev/userservice/service/impl/UserServiceImpl.java
--- a/user-service/user-service/src/main/java/com/khanhisdev/userservice/service/impl/UserServiceImpl.java	(revision 5c2d9b7162e754788cb96f7051f2872931f3821b)
+++ b/user-service/user-service/src/main/java/com/khanhisdev/userservice/service/impl/UserServiceImpl.java	(date 1722970181688)
@@ -4,6 +4,7 @@
 import com.khanhisdev.userservice.dto.RequestDto.MovieDto;
 import com.khanhisdev.userservice.dto.RequestDto.UserDto;
 import com.khanhisdev.userservice.dto.ResponseDto.APIResponseDto;
+import com.khanhisdev.userservice.dto.ResponseDto.ObjectResponse;
 import com.khanhisdev.userservice.dto.ResponseDto.UserResponseDto;
 import com.khanhisdev.userservice.entity.LikedMovie;
 import com.khanhisdev.userservice.entity.Role;
@@ -15,6 +16,10 @@
 import com.khanhisdev.userservice.service.UserService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.data.domain.Pageable;
+import org.springframework.data.domain.Sort;
 import org.springframework.security.core.userdetails.UsernameNotFoundException;
 import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
 import org.springframework.security.crypto.password.PasswordEncoder;
@@ -40,6 +45,24 @@
     private WebClient webClient;
     @Autowired
     private RoleRepository roleRepository;
+
+    @Override
+    public ObjectResponse<UserResponseDto> getAllUsers(int pageNo, int pageSize, String sortBy, String sortDir) {
+        Sort sort= sortDir.equalsIgnoreCase(Sort.Direction.ASC.name()) ? Sort.by(sortBy).ascending()
+                : Sort.by(sortBy).descending();
+        Pageable pageable= PageRequest.of(pageNo,pageSize, sort);
+
+        Page<User> page = userRepository.findAll(pageable);
+        List<User> userList= page.getContent();
+        List<UserResponseDto> content=  userList.stream().map(user -> mapper.mapToResponseDto(user)).collect(Collectors.toList());
+        return new ObjectResponse<UserResponseDto>( content,
+                page.getNumber(),
+                page.getSize(),
+                page.getTotalElements(),
+                page.getTotalPages(),
+                page.isLast());
+    }
+
     @Override
     public UserDto createUser(UserDto userDto){
 
Index: user-service/user-service/src/main/java/com/khanhisdev/userservice/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.khanhisdev.userservice.controller;\r\n\r\nimport com.khanhisdev.userservice.dto.RequestDto.UserDto;\r\nimport com.khanhisdev.userservice.dto.ResponseDto.APIResponseDto;\r\nimport com.khanhisdev.userservice.dto.ResponseDto.UserResponseDto;\r\nimport com.khanhisdev.userservice.entity.LikedMovie;\r\nimport com.khanhisdev.userservice.service.UserService;\r\nimport com.khanhisdev.userservice.utils.CustomHeaders;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\n@RequestMapping(\"/user\")\r\npublic class UserController {\r\n    @Autowired\r\n    private UserService userService;\r\n    @PostMapping\r\n    public ResponseEntity<UserDto> createUser(@RequestBody UserDto userDto){\r\n        return new ResponseEntity<>(userService.createUser(userDto), HttpStatus.CREATED);\r\n    }\r\n    @GetMapping\r\n    public ResponseEntity<APIResponseDto> getUserById(@RequestHeader(CustomHeaders.X_AUTH_USER_ID) Long id){\r\n        return new ResponseEntity<>(userService.getUserById(id), HttpStatus.CREATED);\r\n    }\r\n    @GetMapping(\"{id}\")\r\n    public ResponseEntity<String> getUsername(@PathVariable(name = \"id\") Long id){\r\n        return new ResponseEntity<>(userService.getEmailByUserId(id), HttpStatus.OK) ;\r\n    }\r\n    @PutMapping(\"/likeMovie/{id}\")\r\n    public ResponseEntity<UserResponseDto> likeMovie(@RequestHeader(CustomHeaders.X_AUTH_USER_ID) Long id,@PathVariable(name = \"id\") Long movieId){\r\n        return new ResponseEntity<>(userService.userLikeMovie(id,movieId), HttpStatus.OK);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user-service/user-service/src/main/java/com/khanhisdev/userservice/controller/UserController.java b/user-service/user-service/src/main/java/com/khanhisdev/userservice/controller/UserController.java
--- a/user-service/user-service/src/main/java/com/khanhisdev/userservice/controller/UserController.java	(revision 5c2d9b7162e754788cb96f7051f2872931f3821b)
+++ b/user-service/user-service/src/main/java/com/khanhisdev/userservice/controller/UserController.java	(date 1722970274574)
@@ -2,9 +2,11 @@
 
 import com.khanhisdev.userservice.dto.RequestDto.UserDto;
 import com.khanhisdev.userservice.dto.ResponseDto.APIResponseDto;
+import com.khanhisdev.userservice.dto.ResponseDto.ObjectResponse;
 import com.khanhisdev.userservice.dto.ResponseDto.UserResponseDto;
 import com.khanhisdev.userservice.entity.LikedMovie;
 import com.khanhisdev.userservice.service.UserService;
+import com.khanhisdev.userservice.utils.AppConstants;
 import com.khanhisdev.userservice.utils.CustomHeaders;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
@@ -16,6 +18,15 @@
 public class UserController {
     @Autowired
     private UserService userService;
+    @GetMapping("/all")
+    public ResponseEntity<ObjectResponse<UserResponseDto>> getAllUsers(
+            @RequestParam(value = "pageNo", defaultValue = AppConstants.DEFAULT_PAGE_NUMBER,required = false) int pageNo,
+            @RequestParam(value = "pageSize", defaultValue = AppConstants.DEFAULT_PAGE_SIZE, required = false) int pageSize,
+            @RequestParam(value = "sortBy", defaultValue = AppConstants.DEFAULT_SORT_BY, required = false) String sortBy,
+            @RequestParam(value = "sortDir", defaultValue = AppConstants.DEFAULT_SORT_DIRECTION, required = false) String sortDir
+    ){
+        return new ResponseEntity<>(userService.getAllUsers(pageNo, pageSize, sortBy, sortDir), HttpStatus.OK) ;
+    }
     @PostMapping
     public ResponseEntity<UserDto> createUser(@RequestBody UserDto userDto){
         return new ResponseEntity<>(userService.createUser(userDto), HttpStatus.CREATED);
Index: movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.khanhisdev.movieservice.config;\r\n\r\n\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.khanhisdev.movieservice.exception.AuthException.AccessDeniedExceptionHandler;\r\nimport com.khanhisdev.movieservice.exception.AuthException.AuthenticationExceptionHandler;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.security.config.Customizer;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\r\nimport org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\r\nimport org.springframework.security.config.web.server.ServerHttpSecurity;\r\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\r\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\r\nimport org.springframework.security.web.AuthenticationEntryPoint;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.server.SecurityWebFilterChain;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\n@RequiredArgsConstructor\r\npublic class SecurityConfig {\r\n\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http.\r\n\r\n                csrf(AbstractHttpConfigurer::disable)\r\n                .authorizeHttpRequests(authz ->\r\n                        authz.\r\n                                requestMatchers(\"/actuator/**\").permitAll()\r\n                                .requestMatchers(HttpMethod.GET, \"/movie/**\").permitAll()\r\n                                .requestMatchers(HttpMethod.GET, \"/showtime/**\").permitAll()\r\n                                .requestMatchers(HttpMethod.PUT, \"/showtime/**\").permitAll()\r\n                                .requestMatchers(HttpMethod.POST, \"/theater/**\").permitAll()\r\n                                .requestMatchers(HttpMethod.POST, \"/showtime/**\").permitAll()\r\n                                .requestMatchers(HttpMethod.POST, \"/movie/**\").hasAuthority(\"SCOPE_ADMIN\")\r\n\r\n\r\n                        .anyRequest()\r\n                        .authenticated())\r\n                .oauth2ResourceServer(oauth2 -> oauth2\r\n                        .jwt(Customizer.withDefaults()));\r\n        return http.build();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/config/SecurityConfig.java b/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/config/SecurityConfig.java
--- a/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/config/SecurityConfig.java	(revision 5c2d9b7162e754788cb96f7051f2872931f3821b)
+++ b/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/config/SecurityConfig.java	(date 1723019855589)
@@ -20,27 +20,43 @@
 import org.springframework.security.web.AuthenticationEntryPoint;
 import org.springframework.security.web.SecurityFilterChain;
 import org.springframework.security.web.server.SecurityWebFilterChain;
+import org.springframework.web.cors.CorsConfiguration;
+import org.springframework.web.cors.CorsConfigurationSource;
+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
+
+import java.util.Collections;
 
 @Configuration
 @EnableWebSecurity
 @RequiredArgsConstructor
 public class SecurityConfig {
-
+    @Bean
+    public CorsConfigurationSource corsConfigurationSource() {
+        CorsConfiguration configuration = new CorsConfiguration();
+        configuration.setAllowedOrigins(Collections.singletonList("*"));
+        configuration.setAllowedMethods(Collections.singletonList("*"));
+        configuration.setAllowedHeaders(Collections.singletonList("*"));
+        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
+        source.registerCorsConfiguration("/**", configuration);
+        return source;
+    }
 
     @Bean
     public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
-        http.
-
-                csrf(AbstractHttpConfigurer::disable)
+        http
+                .httpBasic(Customizer.withDefaults())
+                 .cors(AbstractHttpConfigurer::disable)
+                .csrf(AbstractHttpConfigurer::disable)
                 .authorizeHttpRequests(authz ->
                         authz.
                                 requestMatchers("/actuator/**").permitAll()
                                 .requestMatchers(HttpMethod.GET, "/movie/**").permitAll()
                                 .requestMatchers(HttpMethod.GET, "/showtime/**").permitAll()
                                 .requestMatchers(HttpMethod.PUT, "/showtime/**").permitAll()
+                                .requestMatchers(HttpMethod.PUT, "/movie/**").permitAll()
                                 .requestMatchers(HttpMethod.POST, "/theater/**").permitAll()
                                 .requestMatchers(HttpMethod.POST, "/showtime/**").permitAll()
-                                .requestMatchers(HttpMethod.POST, "/movie/**").hasAuthority("SCOPE_ADMIN")
+                                .requestMatchers(HttpMethod.POST, "/movie/**").permitAll()
 
 
                         .anyRequest()
Index: user-service/user-service/src/main/java/com/khanhisdev/userservice/dto/ResponseDto/ObjectResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user-service/user-service/src/main/java/com/khanhisdev/userservice/dto/ResponseDto/ObjectResponse.java b/user-service/user-service/src/main/java/com/khanhisdev/userservice/dto/ResponseDto/ObjectResponse.java
new file mode 100644
--- /dev/null	(date 1722970181729)
+++ b/user-service/user-service/src/main/java/com/khanhisdev/userservice/dto/ResponseDto/ObjectResponse.java	(date 1722970181729)
@@ -0,0 +1,22 @@
+package com.khanhisdev.userservice.dto.ResponseDto;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.util.List;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+public class ObjectResponse<T> {
+    private List<T> content;
+    private int  pageNo;
+    private int pageSize;
+    private long totalElement;
+    private int totalPages;
+    private boolean last;
+
+}
Index: movie-service/movie-service/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>3.2.7</version>\r\n\t\t<relativePath/> <!-- lookup parent from repository -->\r\n\t</parent>\r\n\t<groupId>com.khanhisdev</groupId>\r\n\t<artifactId>movie-service</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>movie-service</name>\r\n\t<description>Spring Boot project as movie-service</description>\r\n\t<url/>\r\n\t<licenses>\r\n\t\t<license/>\r\n\t</licenses>\r\n\t<developers>\r\n\t\t<developer/>\r\n\t</developers>\r\n\t<scm>\r\n\t\t<connection/>\r\n\t\t<developerConnection/>\r\n\t\t<tag/>\r\n\t\t<url/>\r\n\t</scm>\r\n\t<properties>\r\n\t\t<java.version>17</java.version>\r\n\t\t<spring-cloud.version>2023.0.2</spring-cloud.version>\r\n\t</properties>\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.cloud</groupId>\r\n\t\t\t<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.mysql</groupId>\r\n\t\t\t<artifactId>mysql-connector-j</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t<optional>true</optional>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<!-- https://mvnrepository.com/artifact/org.modelmapper/modelmapper -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.modelmapper</groupId>\r\n\t\t\t<artifactId>modelmapper</artifactId>\r\n\t\t\t<version>3.1.1</version>\r\n\t\t</dependency>\r\n\t\t<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-validation</artifactId>\r\n\t\t\t<version>3.3.0</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-actuator</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.micrometer</groupId>\r\n\t\t\t<artifactId>micrometer-registry-prometheus</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.cloud</groupId>\r\n\t\t\t<artifactId>spring-cloud-starter-config</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.cloud</groupId>\r\n\t\t\t<artifactId>spring-cloud-starter-bus-amqp</artifactId>\r\n\t\t</dependency>\r\n\t\t<!--add distributed tracing -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.micrometer</groupId>\r\n\t\t\t<artifactId>micrometer-observation</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.micrometer</groupId>\r\n\t\t\t<artifactId>micrometer-tracing-bridge-brave</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.zipkin.reporter2</groupId>\r\n\t\t\t<artifactId>zipkin-reporter-brave</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>net.logstash.logback</groupId>\r\n\t\t\t<artifactId>logstash-logback-encoder</artifactId>\r\n\t\t\t<version>7.4</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-oauth2-resource-server</artifactId>\r\n\t\t</dependency>\r\n\r\n\t</dependencies>\r\n\t<dependencyManagement>\r\n\t\t<dependencies>\r\n\t\t\t<dependency>\r\n\t\t\t\t<groupId>org.springframework.cloud</groupId>\r\n\t\t\t\t<artifactId>spring-cloud-dependencies</artifactId>\r\n\t\t\t\t<version>${spring-cloud.version}</version>\r\n\t\t\t\t<type>pom</type>\r\n\t\t\t\t<scope>import</scope>\r\n\t\t\t</dependency>\r\n\t\t</dependencies>\r\n\t</dependencyManagement>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t\t<configuration>\r\n\t\t\t\t\t<excludes>\r\n\t\t\t\t\t\t<exclude>\r\n\t\t\t\t\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t\t\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t\t\t\t</exclude>\r\n\t\t\t\t\t</excludes>\r\n\t\t\t\t</configuration>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/movie-service/movie-service/pom.xml b/movie-service/movie-service/pom.xml
--- a/movie-service/movie-service/pom.xml	(revision 5c2d9b7162e754788cb96f7051f2872931f3821b)
+++ b/movie-service/movie-service/pom.xml	(date 1723018730407)
@@ -88,18 +88,18 @@
 			<artifactId>spring-cloud-starter-bus-amqp</artifactId>
 		</dependency>
 		<!--add distributed tracing -->
-		<dependency>
-			<groupId>io.micrometer</groupId>
-			<artifactId>micrometer-observation</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>io.micrometer</groupId>
-			<artifactId>micrometer-tracing-bridge-brave</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>io.zipkin.reporter2</groupId>
-			<artifactId>zipkin-reporter-brave</artifactId>
-		</dependency>
+<!--		<dependency>-->
+<!--			<groupId>io.micrometer</groupId>-->
+<!--			<artifactId>micrometer-observation</artifactId>-->
+<!--		</dependency>-->
+<!--		<dependency>-->
+<!--			<groupId>io.micrometer</groupId>-->
+<!--			<artifactId>micrometer-tracing-bridge-brave</artifactId>-->
+<!--		</dependency>-->
+<!--		<dependency>-->
+<!--			<groupId>io.zipkin.reporter2</groupId>-->
+<!--			<artifactId>zipkin-reporter-brave</artifactId>-->
+<!--		</dependency>-->
 		<dependency>
 			<groupId>net.logstash.logback</groupId>
 			<artifactId>logstash-logback-encoder</artifactId>
Index: movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/entity/Movie.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.khanhisdev.movieservice.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Set;\r\nimport java.util.SortedSet;\r\n\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n\r\n@Entity\r\n@Table(name = \"movies\")\r\npublic class Movie {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"movie_id\")\r\n    private Long id;\r\n    @Column(unique = true)\r\n    private String name;\r\n    private String country;\r\n    private String description;\r\n    // by minutes\r\n    private int durationMin;\r\n    @ManyToMany(cascade = CascadeType.MERGE)\r\n    @JoinTable(name=\"movie_director\",\r\n            joinColumns = @JoinColumn(name = \"movie_id\"),\r\n            inverseJoinColumns = @JoinColumn(name = \"director_id\")\r\n    )\r\n    private Set<Director> director;\r\n    @ManyToMany(cascade = CascadeType.MERGE)\r\n    @JoinTable(name=\"movie_actor\",\r\n            joinColumns = @JoinColumn(name = \"movie_id\"),\r\n            inverseJoinColumns = @JoinColumn(name = \"actor_id\")\r\n    )\r\n    private List<Actor> actors;\r\n    private String urlImage;\r\n    @ManyToMany(cascade = {CascadeType.MERGE})\r\n    @JoinTable(name = \"movie_category\",\r\n            joinColumns= @JoinColumn( name = \"movie_id\") ,\r\n            inverseJoinColumns = @JoinColumn(name=\"category_id\")\r\n    )\r\n    private Set<Category> categories= new HashSet<>();\r\n    @OneToMany(mappedBy = \"movie\", cascade = CascadeType.ALL)\r\n    private List<Showtime> showtimeList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/entity/Movie.java b/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/entity/Movie.java
--- a/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/entity/Movie.java	(revision 5c2d9b7162e754788cb96f7051f2872931f3821b)
+++ b/movie-service/movie-service/src/main/java/com/khanhisdev/movieservice/entity/Movie.java	(date 1723011873252)
@@ -32,7 +32,7 @@
             inverseJoinColumns = @JoinColumn(name = "director_id")
     )
     private Set<Director> director;
-    @ManyToMany(cascade = CascadeType.MERGE)
+    @ManyToMany(cascade = CascadeType.PERSIST)
     @JoinTable(name="movie_actor",
             joinColumns = @JoinColumn(name = "movie_id"),
             inverseJoinColumns = @JoinColumn(name = "actor_id")
